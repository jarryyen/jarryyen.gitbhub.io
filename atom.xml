<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jarryyen.github.io]]></title>
  <link href="https://jarryyen.github.io/atom.xml" rel="self"/>
  <link href="https://jarryyen.github.io/"/>
  <updated>2019-04-21T22:52:45+08:00</updated>
  <id>https://jarryyen.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[开启荒野无灯大佬新固件的隐藏彩蛋]]></title>
    <link href="https://jarryyen.github.io/15557613334242.html"/>
    <updated>2019-04-20T19:55:33+08:00</updated>
    <id>https://jarryyen.github.io/15557613334242.html</id>
    <content type="html"><![CDATA[
<p><a href="http://p4davan.80x86.io/">http://p4davan.80x86.io/</a><br/>
大佬的最新固件没有SS.... 用下面的命令可以直接开启</p>

<p>感谢大佬~</p>

<pre><code class="language-text">nvram set google_fu_mode=0xDEADBEEF

nvram commit
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1.Mac上如何安装Python3和scrapy]]></title>
    <link href="https://jarryyen.github.io/15459836208690.html"/>
    <updated>2018-12-28T15:53:40+08:00</updated>
    <id>https://jarryyen.github.io/15459836208690.html</id>
    <content type="html"><![CDATA[
<p>1) 安装brew<br/>
使用浏览器打开<a href="https://brew.sh/,%E6%8C%89%E7%85%A7%E6%8F%90%E7%A4%BA%E5%9C%A8**%E7%BB%88%E7%AB%AF**%E8%BE%93%E5%85%A5%E4%B8%8B%E9%9D%A2%E4%BF%A1%E6%81%AF">https://brew.sh/,按照提示在**终端**输入下面信息</a></p>

<pre><code class="language-text">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;

</code></pre>

<p>2) 安装Command Line Tools,在<strong>终端</strong>中输入下面命令</p>

<pre><code class="language-text">xcode-select --install
</code></pre>

<p>3) 安装GCC编译器,在<strong>终端</strong>中输入下面命令</p>

<pre><code class="language-text">brew install gcc
</code></pre>

<p>4) 安装后使用brew安装Python3,在<strong>终端</strong>中输入下面命令</p>

<pre><code class="language-text">brew install python3
</code></pre>

<p>5) 安装scrapy,在<strong>终端</strong>中输入下面命令</p>

<pre><code class="language-text">pip3 install scrapy
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代码merge常用命令]]></title>
    <link href="https://jarryyen.github.io/15451223173625.html"/>
    <updated>2018-12-18T16:38:37+08:00</updated>
    <id>https://jarryyen.github.io/15451223173625.html</id>
    <content type="html"><![CDATA[
<h1 id="toc_0">切换到master 分支</h1>

<p>git checkout master </p>

<h1 id="toc_1">切换到dev分支</h1>

<p>git checkout dev</p>

<h1 id="toc_2">获取最新的分支信息</h1>

<p>git fetch </p>

<h1 id="toc_3">确认处于本地分支中</h1>

<p>git status </p>

<h1 id="toc_4">在 dev 分支上合并master 分支</h1>

<p>git merge origin/master</p>

<h1 id="toc_5">在master分支上合并dev分支</h1>

<p>git merge origin/dev</p>

<p>执行 git log ,如果看到 master 分支和dev 分支的最新commit id是一致的，说明master和dev分支是一样的</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[以太坊相关参考文档]]></title>
    <link href="https://jarryyen.github.io/15451222627805.html"/>
    <updated>2018-12-18T16:37:42+08:00</updated>
    <id>https://jarryyen.github.io/15451222627805.html</id>
    <content type="html"><![CDATA[
<p><a href="http://web3js.readthedocs.io/en/1.0/index.html">http://web3js.readthedocs.io/en/1.0/index.html</a> web3.js 1.0 版本</p>

<p><a href="https://github.com/ethereum/wiki/wiki/JavaScript-API">https://github.com/ethereum/wiki/wiki/JavaScript-API</a>   web3.js 0.2版本</p>

<p><a href="https://solidity-cn.readthedocs.io/zh/develop/">https://solidity-cn.readthedocs.io/zh/develop/</a>  Solidity 中文版帮助文档</p>

<p><a href="https://solidity.readthedocs.io/en/develop/">https://solidity.readthedocs.io/en/develop/</a>  Solidity 英文版帮助文档</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http auth basic认证]]></title>
    <link href="https://jarryyen.github.io/15451222204100.html"/>
    <updated>2018-12-18T16:37:00+08:00</updated>
    <id>https://jarryyen.github.io/15451222204100.html</id>
    <content type="html"><![CDATA[
<p>使用 nginx 作为前端服务器。某些资源要保护。用 http auth basic 认证简单方便。<br/>
nginx 的 http auth basic 的密码是用 crypt(3) 加密的。具体可以参考：<a href="http://wiki.nginx.org/HttpAuthBasicModule">http://wiki.nginx.org/HttpAuthBasicModule</a><br/>
1.修改NGINX配置文件</p>

<pre><code class="language-text">location ~ /admin {
        auth_basic &quot;Restricted&quot;;
        auth_basic_user_file /etc/nginx/pass_file;//请使用绝对路径
        root   /home/www/admin; //host 地址，不然认证通过之后，找不到对应的文件
}  
</code></pre>

<p>2.生成加密的auth_basic_user_file文件</p>

<pre><code class="language-text">htpasswd -c -d /etc/nginx/pass_file  username
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【16元全国免流】你要的19元联通全国无限流量，最全合集，邮寄全国]]></title>
    <link href="https://jarryyen.github.io/15311228224258.html"/>
    <updated>2018-07-09T15:53:42+08:00</updated>
    <id>https://jarryyen.github.io/15311228224258.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>网友反馈:接到工作人员电话:收到卡后一周内激活充值一百元不会回收号码<br/>
网友反馈:可以取消集团网和回电宝，实际16元一个月全国不限流量</p>
</blockquote>

<p>南京联通和腾讯联合南京地区部分高校推出了校园套餐，虽然是校园套餐，但是其实和大王卡、米粉卡差不多，都可以顺丰邮寄，关键是可以异地销卡，这就相当于给全国用户享受低价无限流量套餐的机会了。<br/>
合作的高校还不少，下面是博主从网上搬来的南京部分高校的申请地址：<br/>
（下方所有链接都是南京地区高校，套餐内容一样，部分学校号段已经选完,可以另换其他高校申请。）</p>

<p><a href="http://xyk.js165.com:8000/wapycfd/nffxh/login">http://xyk.js165.com:8000/wapycfd/nffxh/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/qqwx/login">http://xyk.js165.com:8000/wapycfd/qqwx/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/seu/selectNumber">http://xyk.js165.com:8000/wapycfd/seu/selectNumber</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/jit/login">http://xyk.js165.com:8000/wapycfd/jit/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/njit/login">http://xyk.js165.com:8000/wapycfd/njit/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/nau/login">http://xyk.js165.com:8000/wapycfd/nau/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/nayw/login">http://xyk.js165.com:8000/wapycfd/nayw/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/nffx/login">http://xyk.js165.com:8000/wapycfd/nffx/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/nzyone/login">http://xyk.js165.com:8000/wapycfd/nzyone/login</a></p>

<p><a href="http://xyk.js165.com:8000/wapycfd/ddcx/login">http://xyk.js165.com:8000/wapycfd/ddcx/login</a></p>

<p><img src="https://ws1.sinaimg.cn/large/0072W8ttgy1ft16xqvpvsj30hp0hpwmu.jpg" alt=""/></p>

<p>关于网友们的一些疑问：</p>

<blockquote>
<p>问：这个卡是否需要在12或24个月到营业厅续订？<br/>
答：博主在联通APP上看到的套餐是2022年6月30日到期，个人认为应该不需要到营业厅续订，也可能可以直接拨打下方宣传海报上的电话续订。（收到卡片之后，会附赠一张海报，通常下面会留有电话）</p>

<p>问：如果套餐到期了是否需要到当地销户？<br/>
答：博主已经咨询客服了，可以到你所在省市的大营业厅进行注销，不用到江苏当地。</p>

<p>问：可以取消1元集团网和2元回电宝吗？<br/>
答：拨打10010可以取消会电宝，不可以取消集团网。取消后不影响无限流量套餐。因此，可以视为月租为17元/月。</p>

<p>问：申请之后是用什么快递发的？为什么查不到物流？ <br/>
答：邮政EMS，那个申请页面查不到物流信息，只有等快递通知，一般2-3天。</p>

<p>问：同一个人同一个身份信息最多可以办理几张卡？<br/>
答：一个人凭本人信息最多可以办理一张。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[联通跨省注销方法]]></title>
    <link href="https://jarryyen.github.io/15311227612961.html"/>
    <updated>2018-07-09T15:52:41+08:00</updated>
    <id>https://jarryyen.github.io/15311227612961.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15311227612961/%E8%81%94%E9%80%9A%E6%B3%A8%E9%94%80%E5%8F%B7%E7%A0%81.jpg" alt="联通注销号码"/></p>

<p>使用上方二维码可以跨省注销联通号码</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins ssh登陆到其他主机]]></title>
    <link href="https://jarryyen.github.io/15287113422567.html"/>
    <updated>2018-06-11T18:02:22+08:00</updated>
    <id>https://jarryyen.github.io/15287113422567.html</id>
    <content type="html"><![CDATA[
<p>今天遇到了一个坑,同事部署的jenkins.<br/>
无论我怎么添加key,在execute shll里面执行scp等操作都无法登陆....结果找了半天...jenkins的pubkey位置在</p>

<pre><code class="language-text">/var/lib/jenkins/.ssh/id_rsa.pub 
</code></pre>

<p>无语了....<br/>
在此记录一下...</p>

<p>还有一个问题.就是known_hosts问题.</p>

<pre><code class="language-text">su -s /bin/bash jenkins

ssh root@ip 
</code></pre>

<p>登陆一下就好了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Opera浏览器送你无限流量的V.P.N]]></title>
    <link href="https://jarryyen.github.io/15263677435766.html"/>
    <updated>2018-05-15T15:02:23+08:00</updated>
    <id>https://jarryyen.github.io/15263677435766.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">1.下载Opera浏览器 <a href="http://www.opera.com">www.opera.com</a></h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1frc1mn8otoj30vh0j944f.jpg" alt=""/></p>

<h4 id="toc_1">2.安装Opera</h4>

<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1frc1n4hzzoj312s0sa4i2.jpg" alt=""/><br/>
3.修改你的电脑所在地,将这里设置为其他地区.例如:中国澳门(仅Mac图例,Win请自己寻找相关功能)<br/>
<img src="https://ws3.sinaimg.cn/large/006tKfTcly1frc1gvo0nwj31140x8qbg.jpg" alt=""/><br/>
<img src="https://ws3.sinaimg.cn/large/006tKfTcly1frc1hd7hehj31140qewjk.jpg" alt=""/></p>

<h4 id="toc_2">4.点击Opera菜单并进入&quot;首选下&quot;</h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1frc1lvma8ij307d09amy3.jpg" alt=""/></p>

<h4 id="toc_3">5.选择“隐私和安全”选项,并在右侧选择相应选项即可开启</h4>

<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1frc1k61tr0j30vh0j9wit.jpg" alt=""/></p>

<h4 id="toc_4">6.出现蓝色图标打开完成,并且可以设置连接哪一个区域的节点或者使用系统推荐(在这里推荐手动指定亚洲)</h4>

<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1frc1oquve2j308z0d3dgn.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[远程执行tomcat执行脚本出现找不到环境变量问题]]></title>
    <link href="https://jarryyen.github.io/15247245416912.html"/>
    <updated>2018-04-26T14:35:41+08:00</updated>
    <id>https://jarryyen.github.io/15247245416912.html</id>
    <content type="html"><![CDATA[
<p>问题描述:</p>

<blockquote>
<p>我使用jenkins在build工程的时候,使用了执行shell部分.脚本内含有远程主机运行或者停止tomcat脚本,在执行的时候报告有java_home和java_jar没有环境变量的问题.根据问题查找,是远程执行的时候没有加载profile造成环境变量确实的问题.<br/>
<img src="https://ws2.sinaimg.cn/large/006tKfTcly1fqq20j3ev3j30tr0fudir.jpg" alt=""/><br/>
脚本中的远程执行命令是</p>

<blockquote>
<p>ssh root@web01 &quot;/data/script/run.sh&quot; 中的 run.sh包含tomcat启动脚本</p>
</blockquote>
</blockquote>

<p>解决方案:</p>

<blockquote>
<p>在tomcat的catalina.sh中添加环境变量部分.<br/>
<img src="https://ws2.sinaimg.cn/large/006tKfTcly1fqq1ywrzs4j315k0xitf3.jpg" alt=""/></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MYSQL命令行内倒入文本数据]]></title>
    <link href="https://jarryyen.github.io/15203221731981.html"/>
    <updated>2018-03-06T15:42:53+08:00</updated>
    <id>https://jarryyen.github.io/15203221731981.html</id>
    <content type="html"><![CDATA[
<p>load data local infile &#39;/文件名.txt&#39; into table 表名(字段);</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux增加swap(aws建议添加)]]></title>
    <link href="https://jarryyen.github.io/15203031656074.html"/>
    <updated>2018-03-06T10:26:05+08:00</updated>
    <id>https://jarryyen.github.io/15203031656074.html</id>
    <content type="html"><![CDATA[
<p>添加交换文件步骤： <br/>
1、找个地方创建一个.swap的文件，我放在了/mnt目录下 <br/>
sudo dd if=/dev/zero of=/mnt/10GB.swap bs=1G count=10 <br/>
这条命令是在/mnt目录下创建一个名为10GB.swap的交换文件，基础大小为1GB，有10个，so：1*10=10GB <br/>
2、把创建的.swap文件格式化为Swap文件 <br/>
sudo mkswap /mnt/10GB.swap <br/>
3、把创建的.swap文件加入到系统中 <br/>
sudo swapon /mnt/10GB.swap <br/>
以上步骤可以做到临时启用交换文件，如果要下次启动系统的时候也启动交换文件，那么还要继续做以下步骤。 <br/>
4、在/ect/fstab中加入新的Swap分区 <br/>
sudo gedit /etc/fstab <br/>
在最后一行添加（前面是生成的.swap文件的位置） <br/>
/mnt/10GB.swap none swap sw 0 0 <br/>
以上步骤为添加交换文件方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geth 的JavaScript控制]]></title>
    <link href="https://jarryyen.github.io/15192838129981.html"/>
    <updated>2018-02-22T15:16:52+08:00</updated>
    <id>https://jarryyen.github.io/15192838129981.html</id>
    <content type="html"><![CDATA[
<ol>
<li>  如何连接</li>
<li><p>常用命令</p>
<ol>
<li>attach</li>
<li>admin.peers</li>
<li>net.peerCount</li>
<li>admin.addPeer(&quot;enode://....&quot;)</li>
</ol></li>
<li><p>如何连接</p>
<blockquote>
<p>geth attach [路径]/geth.ipc<br/>
geth attach http://[IP]:8545<br/>
geth attach ws://[IP]:8545</p>
</blockquote></li>
<li><p>常用命令</p>
<blockquote>
<p>attach<br/>
可以使用geth然后使用这个参数可以进行登录</p>
</blockquote></li>
</ol>

<pre><code class="language-text">-----
&gt;admin.peers
&gt;查看集群信息

-----
&gt;net.peerCount
&gt;查看现在已经连接的节点数量

-----
&gt;admin.addPeer(&quot;enode://....&quot;)
&gt;可以使用这个方法添加节点

----
&gt;admin.peers.forEach(function(p) {console.log(p.network.remoteAddress);})
&gt;通过这个方法可以查看已经连接的节点IP列表
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 7.4 配置BBR加速]]></title>
    <link href="https://jarryyen.github.io/15180905572524.html"/>
    <updated>2018-02-08T19:49:17+08:00</updated>
    <id>https://jarryyen.github.io/15180905572524.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">配置BBR加速</h4>

<p>什么是BBR：</p>

<p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p>

<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>

<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>

<p>BBR解决了两个问题：</p>

<p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。<br/>
降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br/>
Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p>

<p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p>

<h5 id="toc_1">BBR项目地址：</h5>

<blockquote>
<p><a href="https://github.com/google/bbr">https://github.com/google/bbr</a></p>
</blockquote>

<p>升级内核，第一步首先是升级内核到支持BBR的版本：<br/>
1.yum更新系统版本：</p>

<blockquote>
<p>yum update</p>
</blockquote>

<p>2.查看系统版本：</p>

<pre><code class="language-text">[root@server ~]# cat /etc/redhat-release 
CentOS Linux release 7.4.1708 (Core) 
[root@server ~]# 
</code></pre>

<p>3.安装elrepo并升级内核：</p>

<pre><code class="language-text">[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y
</code></pre>

<p>4.更新grub文件并重启系统：</p>

<pre><code class="language-text">[root@server ~]# egrep  ^menuentry /etc/grub2.cfg |     cut -f 2 -d \&#39;
CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)
CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)
CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)
[root@server ~]# grub2-set-default 0
[root@server ~]# reboot
</code></pre>

<p>5.重启完成后查看内核是否已更换为4.14版本：</p>

<pre><code class="language-text">[root@server ~]# uname -r 4.14.14-1.el7.elrepo.x86_64
[root@server ~]#
</code></pre>

<p>6.开启bbr：</p>

<pre><code class="language-text">[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容
net.core.default_qdisc = fq
</code></pre>

<p>net.ipv4.tcp_congestion_control = bbr</p>

<p>7.加载系统参数：</p>

<pre><code class="language-text">[root@vultr ~]# sysctl -p
net.ipv6.conf.all.accept_ra = 2
net.ipv6.conf.eth0.accept_ra = 2
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
[root@vultr ~]#
</code></pre>

<p>如上，输出了我们添加的那两行配置代表正常。</p>

<p>8.确定bbr已经成功开启：</p>

<pre><code class="language-text">[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = bbr cubic reno
[root@vultr ~]# lsmod | grep bbr
tcp_bbr                20480  2 
[root@vultr ~]# 
</code></pre>

<p>输出内容如上，则表示bbr已经成功开启。    </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS7.4搭建shadowsocks]]></title>
    <link href="https://jarryyen.github.io/15180816293582.html"/>
    <updated>2018-02-08T17:20:29+08:00</updated>
    <id>https://jarryyen.github.io/15180816293582.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">安装 pip</h4>

<p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p>

<p>在控制台执行以下命令安装 pip</p>

<pre><code class="language-text">[root@server ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;
[root@server ~]# python get-pip.py
</code></pre>

<h4 id="toc_1">安装配置 shadowsocks</h4>

<p>在控制台执行以下命令安装 shadowsocks：</p>

<pre><code class="language-text">[root@server ~]# pip install --upgrade pip
[root@server ~]# pip install shadowsocks
</code></pre>

<p>安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下：</p>

<pre><code class="language-text">[root@server ~]# vim /etc/shadowsocks.json
{
&quot;server&quot;: &quot;0.0.0.0&quot;,
&quot;local_address&quot;:&quot;127.0.0.1&quot;,
&quot;local_port&quot;: 1080,
&quot;port_password&quot;: {
&quot;8080&quot;: &quot;填写密码&quot;,
&quot;8081&quot;: &quot;填写密码&quot;
},
&quot;timeout&quot;: 600,
&quot;method&quot;: &quot;aes-256-cfb&quot;
}
</code></pre>

<p>说明：</p>

<p>method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table<br/>
port_password为端口对应的密码，可使用密码生成工具生成一个随机密码<br/>
以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p>

<h5 id="toc_2">如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置：</h5>

<pre><code class="language-text">{
&quot;server&quot;: &quot;0.0.0.0&quot;,
&quot;server_port&quot;: 8080,
&quot;password&quot;: &quot;填写密码&quot;,
&quot;method&quot;: &quot;aes-256-cfb&quot;
}
</code></pre>

<p>说明：</p>

<ul>
<li>server_port为服务监听端口</li>
<li>password为密码</li>
</ul>

<p>同样的以上两项信息在配置shadowsocks 客户端时需要配置一致。</p>

<hr/>

<h4 id="toc_3">配置自启动</h4>

<p>编辑shadowsocks 服务的启动脚本文件，内容如下：</p>

<pre><code class="language-text">[root@server ~]# vim /etc/systemd/system/shadowsocks.service
[Unit]
Description=Shadowsocks

[Service]
TimeoutStartSec=0
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json

[Install]
WantedBy=multi-user.target
</code></pre>

<p>执行以下命令启动 shadowsocks 服务：</p>

<pre><code class="language-text">[root@server ~]# systemctl enable shadowsocks
[root@server ~]# systemctl start shadowsocks
</code></pre>

<p>检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p>

<blockquote>
<p>systemctl status shadowsocks -l</p>
</blockquote>

<p>确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的：</p>

<pre><code class="language-text">[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent
success
[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanent
success
[root@server ~]# firewall-cmd --reload
success
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 10.13(High Sierra)开启隐私权限]]></title>
    <link href="https://jarryyen.github.io/15162450810938.html"/>
    <updated>2018-01-18T11:11:21+08:00</updated>
    <id>https://jarryyen.github.io/15162450810938.html</id>
    <content type="html"><![CDATA[
<p>在下载一些Mac软件后打卡，系统会告诉你说软件受损，需要删除掉。其实，并不是软件受损，而是苹果修改了安全限制。以前，允许来自任何第三方的软件有选项，可以选择。现在，苹果去掉了选项，必须要从App Store或者含有苹果认证证书的软件才可以运行。</p>

<p>如果关闭这个选项，实现任何软件都可以运行呢？</p>

<p>我们只需要打开终端，输入下面的命令</p>

<blockquote>
<p>sudo spctl --master-disable</p>
</blockquote>

<p>然后打开系统便好设置-&gt;安全性与隐私选项-&gt;任何来源（最下面）<br/>
![WX20180118-111614@2x](# MacOS X 10.13(High Sierra)开启隐私权限</p>

<p>在下载一些Mac软件后打开，系统会告诉你说软件受损，需要删除掉。其实，并不是软件受损，而是苹果修改了安全限制。以前，允许来自任何第三方的软件有选项，可以选择。现在，苹果去掉了选项，必须要从App Store或者含有苹果认证证书的软件才可以运行。</p>

<p>如果关闭这个选项，实现任何软件都可以运行呢？</p>

<p>我们只需要打开终端，输入下面的命令</p>

<blockquote>
<p>sudo spctl --master-disable</p>
</blockquote>

<p>然后打开系统便好设置-&gt;安全性与隐私选项-&gt;任何来源（最下面）<br/>
<img src="http://ofcfvx6lf.bkt.clouddn.com/WX20180118-111614@2x.png" alt="安全性与隐私"/></p>

<p>选择这个选项，软件就可以正常运行了</p>

<p>选择这个选项，软件就可以正常运行了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云(aws)提供了4.9核心主机]]></title>
    <link href="https://jarryyen.github.io/15161754454851.html"/>
    <updated>2018-01-17T15:50:45+08:00</updated>
    <id>https://jarryyen.github.io/15161754454851.html</id>
    <content type="html"><![CDATA[
<p>今天发行aws提供了4.9的主机</p>

<blockquote>
<p>4.9.76-38.79.amzn2.x86_64</p>
</blockquote>

<p>并且aws用的是什么虚拟化技术呢？<br/>
我们使用virt-what进行查看</p>

<blockquote>
<p>如果没有可以通过 yum install virt-what 进行安装</p>
</blockquote>

<p>结果是</p>

<blockquote>
<p>xen-hvm</p>
</blockquote>

<p>如何开通BBR?<br/>
在sysctl.conf里面添加如下2条信息</p>

<blockquote>
<p>net.core.default_qdisc = fq<br/>
net.ipv4.tcp_congestion_control = bbr</p>
</blockquote>

<p>之后执行 sysctl -p</p>

<p>即可开启BBR，查看BBR是否启用使用来查看</p>

<blockquote>
<p>lsmod | grep bbr</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSR连接如何解析]]></title>
    <link href="https://jarryyen.github.io/15160793301068.html"/>
    <updated>2018-01-16T13:08:50+08:00</updated>
    <id>https://jarryyen.github.io/15160793301068.html</id>
    <content type="html"><![CDATA[
<p>1、编码后的 URI 格式：</p>

<p>ss://BASE64-ENCODED-STRING-WITHOUT-PADDING</p>

<p>2、编码前的 URI 格式：</p>

<p>ss://method:password@hostname:port （原文没有直接说明需要把加粗部分经过一次Base64加密才能得下面的地址串）</p>

<p>3、Base64<br/>
ss://YmYtY2ZiOnRlc3RAMTkyLjE2OC4xMDAuMTo4ODg4</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过Hook实现VPN代理]]></title>
    <link href="https://jarryyen.github.io/15159817711460.html"/>
    <updated>2018-01-15T10:02:51+08:00</updated>
    <id>https://jarryyen.github.io/15159817711460.html</id>
    <content type="html"><![CDATA[
<p>需要清单:</p>

<ol>
<li>外网 IP Server(建议独立)</li>
<li>Xen 虚拟化</li>
<li></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[screen detached了怎么办]]></title>
    <link href="https://jarryyen.github.io/15151417121416.html"/>
    <updated>2018-01-05T16:41:52+08:00</updated>
    <id>https://jarryyen.github.io/15151417121416.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-text">screen -X -S [session # you want to kill] quit
</code></pre>

<p>例如:</p>

<pre><code class="language-text">[root@localhost ~]# screen -ls
There are screens on:
        9975.pts-0.localhost    (Detached)
        4588.pts-3.localhost    (Detached)
2 Sockets in /var/run/screen/S-root.

[root@localhost ~]# screen -X -S 4588 quit
[root@localhost ~]# screen -ls
There is a screen on:
        9975.pts-0.localhost    (Detached)
1 Socket in /var/run/screen/S-root.
</code></pre>

<p>可以看到，4588会话已经没有了。</p>

<p>参考资料：<br/>
（1）<a href="http://stackoverflow.com/questions/1509677/kill-detached-screen-session" title="Kill detached screen session">Kill detached screen session</a></p>

]]></content>
  </entry>
  
</feed>
