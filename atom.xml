<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jarryyen.github.io]]></title>
  <link href="https://jarryyen.github.io/atom.xml" rel="self"/>
  <link href="https://jarryyen.github.io/"/>
  <updated>2018-03-06T16:08:01+08:00</updated>
  <id>https://jarryyen.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[MYSQL命令行内倒入文本数据]]></title>
    <link href="https://jarryyen.github.io/15203221731981.html"/>
    <updated>2018-03-06T15:42:53+08:00</updated>
    <id>https://jarryyen.github.io/15203221731981.html</id>
    <content type="html"><![CDATA[
<p>load data local infile &#39;/文件名.txt&#39; into table 表名(字段);</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux增加swap(aws建议添加)]]></title>
    <link href="https://jarryyen.github.io/15203031656074.html"/>
    <updated>2018-03-06T10:26:05+08:00</updated>
    <id>https://jarryyen.github.io/15203031656074.html</id>
    <content type="html"><![CDATA[
<p>添加交换文件步骤： <br/>
1、找个地方创建一个.swap的文件，我放在了/mnt目录下 <br/>
sudo dd if=/dev/zero of=/mnt/10GB.swap bs=1G count=10 <br/>
这条命令是在/mnt目录下创建一个名为10GB.swap的交换文件，基础大小为1GB，有10个，so：1*10=10GB <br/>
2、把创建的.swap文件格式化为Swap文件 <br/>
sudo mkswap /mnt/10GB.swap <br/>
3、把创建的.swap文件加入到系统中 <br/>
sudo swapon /mnt/10GB.swap <br/>
以上步骤可以做到临时启用交换文件，如果要下次启动系统的时候也启动交换文件，那么还要继续做以下步骤。 <br/>
4、在/ect/fstab中加入新的Swap分区 <br/>
sudo gedit /etc/fstab <br/>
在最后一行添加（前面是生成的.swap文件的位置） <br/>
/mnt/10GB.swap none swap sw 0 0 <br/>
以上步骤为添加交换文件方法。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Geth 的JavaScript控制]]></title>
    <link href="https://jarryyen.github.io/15192838129981.html"/>
    <updated>2018-02-22T15:16:52+08:00</updated>
    <id>https://jarryyen.github.io/15192838129981.html</id>
    <content type="html"><![CDATA[
<ol>
<li>  如何连接</li>
<li><p>常用命令</p>

<ol>
<li>attach</li>
<li>admin.peers</li>
<li>net.peerCount</li>
<li>admin.addPeer(&quot;enode://....&quot;)</li>
</ol></li>
<li><p>如何连接</p>

<blockquote>
<p>geth attach [路径]/geth.ipc<br/>
geth attach http://[IP]:8545<br/>
geth attach ws://[IP]:8545</p>
</blockquote></li>
<li><p>常用命令</p>

<blockquote>
<p>attach<br/>
可以使用geth然后使用这个参数可以进行登录</p>
</blockquote>

<hr/>

<blockquote>
<p>admin.peers<br/>
查看集群信息</p>
</blockquote>

<hr/>

<blockquote>
<p>net.peerCount<br/>
查看现在已经连接的节点数量</p>
</blockquote>

<hr/>

<blockquote>
<p>admin.addPeer(&quot;enode://....&quot;)<br/>
可以使用这个方法添加节点</p>
</blockquote>

<hr/>

<blockquote>
<p>admin.peers.forEach(function(p) {console.log(p.network.remoteAddress);})<br/>
通过这个方法可以查看已经连接的节点IP列表</p>
</blockquote></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 7.4 配置BBR加速]]></title>
    <link href="https://jarryyen.github.io/15180905572524.html"/>
    <updated>2018-02-08T19:49:17+08:00</updated>
    <id>https://jarryyen.github.io/15180905572524.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">配置BBR加速</h4>

<p>什么是BBR：</p>

<p>TCP BBR是谷歌出品的TCP拥塞控制算法。BBR目的是要尽量跑满带宽，并且尽量不要有排队的情况。BBR可以起到单边加速TCP连接的效果。</p>

<p>Google提交到Linux主线并发表在ACM queue期刊上的TCP-BBR拥塞控制算法。继承了Google“先在生产环境上部署，再开源和发论文”的研究传统。TCP-BBR已经再YouTube服务器和Google跨数据中心的内部广域网(B4)上部署。由此可见出该算法的前途。</p>

<p>TCP-BBR的目标就是最大化利用网络上瓶颈链路的带宽。一条网络链路就像一条水管，要想最大化利用这条水管，最好的办法就是给这跟水管灌满水。</p>

<p>BBR解决了两个问题：</p>

<p>在有一定丢包率的网络链路上充分利用带宽。非常适合高延迟，高带宽的网络链路。<br/>
降低网络链路上的buffer占用率，从而降低延迟。非常适合慢速接入网络的用户。<br/>
Google 在 2016年9月份开源了他们的优化网络拥堵算法BBR，最新版本的 Linux内核(4.9-rc8)中已经集成了该算法。</p>

<p>对于TCP单边加速，并非所有人都很熟悉，不过有另外一个大名鼎鼎的商业软件“锐速”，相信很多人都清楚。特别是对于使用国外服务器或者VPS的人来说，效果更佳。</p>

<h5 id="toc_1">BBR项目地址：</h5>

<blockquote>
<p><a href="https://github.com/google/bbr">https://github.com/google/bbr</a></p>
</blockquote>

<p>升级内核，第一步首先是升级内核到支持BBR的版本：<br/>
1.yum更新系统版本：</p>

<blockquote>
<p>yum update</p>
</blockquote>

<p>2.查看系统版本：</p>

<pre><code>[root@server ~]# cat /etc/redhat-release 
CentOS Linux release 7.4.1708 (Core) 
[root@server ~]# 
</code></pre>

<p>3.安装elrepo并升级内核：</p>

<pre><code>[root@server ~]# rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org
[root@server ~]# rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm
[root@server ~]# yum --enablerepo=elrepo-kernel install kernel-ml -y
</code></pre>

<p>4.更新grub文件并重启系统：</p>

<pre><code>[root@server ~]# egrep  ^menuentry /etc/grub2.cfg |     cut -f 2 -d \&#39;
CentOS Linux 7 Rescue 8619ff5e1306499eac41c02d3b23868e (4.14.14-1.el7.elrepo.x86_64)
CentOS Linux (4.14.14-1.el7.elrepo.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.11.6.el7.x86_64) 7 (Core)
CentOS Linux (3.10.0-693.el7.x86_64) 7 (Core)
CentOS Linux (0-rescue-c73a5ccf3b8145c3a675b64c4c3ab1d4) 7 (Core)
[root@server ~]# grub2-set-default 0
[root@server ~]# reboot
</code></pre>

<p>5.重启完成后查看内核是否已更换为4.14版本：</p>

<pre><code>[root@server ~]# uname -r 4.14.14-1.el7.elrepo.x86_64
[root@server ~]#
</code></pre>

<p>6.开启bbr：</p>

<pre><code>[root@server ~]# vim /etc/sysctl.conf    # 在文件末尾添加如下内容
net.core.default_qdisc = fq
</code></pre>

<p>net.ipv4.tcp_congestion_control = bbr</p>

<p>7.加载系统参数：</p>

<pre><code>[root@vultr ~]# sysctl -p
net.ipv6.conf.all.accept_ra = 2
net.ipv6.conf.eth0.accept_ra = 2
net.core.default_qdisc = fq
net.ipv4.tcp_congestion_control = bbr
[root@vultr ~]#
</code></pre>

<p>如上，输出了我们添加的那两行配置代表正常。</p>

<p>8.确定bbr已经成功开启：</p>

<pre><code>[root@vultr ~]# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = bbr cubic reno
[root@vultr ~]# lsmod | grep bbr
tcp_bbr                20480  2 
[root@vultr ~]# 
</code></pre>

<p>输出内容如上，则表示bbr已经成功开启。    </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS7.4搭建shadowsocks]]></title>
    <link href="https://jarryyen.github.io/15180816293582.html"/>
    <updated>2018-02-08T17:20:29+08:00</updated>
    <id>https://jarryyen.github.io/15180816293582.html</id>
    <content type="html"><![CDATA[
<h4 id="toc_0">安装 pip</h4>

<p>pip是 python 的包管理工具。在本文中将使用 python 版本的 shadowsocks，此版本的 shadowsocks 已发布到 pip 上，因此我们需要通过 pip 命令来安装。</p>

<p>在控制台执行以下命令安装 pip</p>

<pre><code>[root@server ~]# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;
[root@server ~]# python get-pip.py
</code></pre>

<h4 id="toc_1">安装配置 shadowsocks</h4>

<p>在控制台执行以下命令安装 shadowsocks：</p>

<pre><code>[root@server ~]# pip install --upgrade pip
[root@server ~]# pip install shadowsocks
</code></pre>

<p>安装完成后，需要创建shadowsocks的配置文件/etc/shadowsocks.json，编辑内容如下：</p>

<pre><code>[root@server ~]# vim /etc/shadowsocks.json
{
&quot;server&quot;: &quot;0.0.0.0&quot;,
&quot;local_address&quot;:&quot;127.0.0.1&quot;,
&quot;local_port&quot;: 1080,
&quot;port_password&quot;: {
&quot;8080&quot;: &quot;填写密码&quot;,
&quot;8081&quot;: &quot;填写密码&quot;
},
&quot;timeout&quot;: 600,
&quot;method&quot;: &quot;aes-256-cfb&quot;
}
</code></pre>

<p>说明：</p>

<p>method为加密方法，可选aes-128-cfb, aes-192-cfb, aes-256-cfb, bf-cfb, cast5-cfb, des-cfb, rc4-md5, chacha20, salsa20, rc4, table<br/>
port_password为端口对应的密码，可使用密码生成工具生成一个随机密码<br/>
以上两项信息在配置 shadowsocks 客户端时需要配置一致，具体说明可查看 shadowsocks 的帮助文档。</p>

<h5 id="toc_2">如果你不需要配置多个端口的话，仅配置单个端口，则可以使用以下配置：</h5>

<pre><code>{
&quot;server&quot;: &quot;0.0.0.0&quot;,
&quot;server_port&quot;: 8080,
&quot;password&quot;: &quot;填写密码&quot;,
&quot;method&quot;: &quot;aes-256-cfb&quot;
}
</code></pre>

<p>说明：</p>

<ul>
<li>server_port为服务监听端口</li>
<li>password为密码</li>
</ul>

<p>同样的以上两项信息在配置shadowsocks 客户端时需要配置一致。</p>

<hr/>

<h4 id="toc_3">配置自启动</h4>

<p>编辑shadowsocks 服务的启动脚本文件，内容如下：</p>

<pre><code>[root@server ~]# vim /etc/systemd/system/shadowsocks.service
[Unit]
Description=Shadowsocks

[Service]
TimeoutStartSec=0
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json

[Install]
WantedBy=multi-user.target
</code></pre>

<p>执行以下命令启动 shadowsocks 服务：</p>

<pre><code>[root@server ~]# systemctl enable shadowsocks
[root@server ~]# systemctl start shadowsocks
</code></pre>

<p>检查 shadowsocks 服务是否已成功启动，可以执行以下命令查看服务的状态：</p>

<blockquote>
<p>systemctl status shadowsocks -l</p>
</blockquote>

<p>确认服务启动成功后，配置防火墙规则，开放你配置的端口，不然客户端是无法连接的：</p>

<pre><code>[root@server ~]# firewall-cmd --zone=public --add-port=8080/tcp --permanent
success
[root@server ~]# firewall-cmd --zone=public --add-port=8081/tcp --permanent
success
[root@server ~]# firewall-cmd --reload
success
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MacOS X 10.13(High Sierra)开启隐私权限]]></title>
    <link href="https://jarryyen.github.io/15162450810938.html"/>
    <updated>2018-01-18T11:11:21+08:00</updated>
    <id>https://jarryyen.github.io/15162450810938.html</id>
    <content type="html"><![CDATA[
<p>在下载一些Mac软件后打卡，系统会告诉你说软件受损，需要删除掉。其实，并不是软件受损，而是苹果修改了安全限制。以前，允许来自任何第三方的软件有选项，可以选择。现在，苹果去掉了选项，必须要从App Store或者含有苹果认证证书的软件才可以运行。</p>

<p>如果关闭这个选项，实现任何软件都可以运行呢？</p>

<p>我们只需要打开终端，输入下面的命令</p>

<blockquote>
<p>sudo spctl --master-disable</p>
</blockquote>

<p>然后打开系统便好设置-&gt;安全性与隐私选项-&gt;任何来源（最下面）<br/>
![WX20180118-111614@2x](# MacOS X 10.13(High Sierra)开启隐私权限</p>

<p>在下载一些Mac软件后打卡，系统会告诉你说软件受损，需要删除掉。其实，并不是软件受损，而是苹果修改了安全限制。以前，允许来自任何第三方的软件有选项，可以选择。现在，苹果去掉了选项，必须要从App Store或者含有苹果认证证书的软件才可以运行。</p>

<p>如果关闭这个选项，实现任何软件都可以运行呢？</p>

<p>我们只需要打开终端，输入下面的命令</p>

<blockquote>
<p>sudo spctl --master-disable</p>
</blockquote>

<p>然后打开系统便好设置-&gt;安全性与隐私选项-&gt;任何来源（最下面）<br/>
<img src="http://ofcfvx6lf.bkt.clouddn.com/WX20180118-111614@2x.png" alt="安全性与隐私"/></p>

<p>选择这个选项，软件就可以正常运行了</p>

<p>选择这个选项，软件就可以正常运行了</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[亚马逊云(aws)提供了4.9核心主机]]></title>
    <link href="https://jarryyen.github.io/15161754454851.html"/>
    <updated>2018-01-17T15:50:45+08:00</updated>
    <id>https://jarryyen.github.io/15161754454851.html</id>
    <content type="html"><![CDATA[
<p>今天发行aws提供了4.9的主机</p>

<blockquote>
<p>4.9.76-38.79.amzn2.x86_64</p>
</blockquote>

<p>并且aws用的是什么虚拟化技术呢？<br/>
我们使用virt-what进行查看</p>

<blockquote>
<p>如果没有可以通过 yum install virt-what 进行安装</p>
</blockquote>

<p>结果是</p>

<blockquote>
<p>xen-hvm</p>
</blockquote>

<p>如何开通BBR?<br/>
在sysctl.conf里面添加如下2条信息</p>

<blockquote>
<p>net.core.default_qdisc = fq<br/>
net.ipv4.tcp_congestion_control = bbr</p>
</blockquote>

<p>之后执行 sysctl -p</p>

<p>即可开启BBR，查看BBR是否启用使用来查看</p>

<blockquote>
<p>lsmod | grep bbr</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSR连接如何解析]]></title>
    <link href="https://jarryyen.github.io/15160793301068.html"/>
    <updated>2018-01-16T13:08:50+08:00</updated>
    <id>https://jarryyen.github.io/15160793301068.html</id>
    <content type="html"><![CDATA[
<p>1、编码后的 URI 格式：</p>

<p>ss://BASE64-ENCODED-STRING-WITHOUT-PADDING</p>

<p>2、编码前的 URI 格式：</p>

<p>ss://method:password@hostname:port （原文没有直接说明需要把加粗部分经过一次Base64加密才能得下面的地址串）</p>

<p>3、Base64<br/>
ss://YmYtY2ZiOnRlc3RAMTkyLjE2OC4xMDAuMTo4ODg4</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过Hook实现VPN代理]]></title>
    <link href="https://jarryyen.github.io/15159817711460.html"/>
    <updated>2018-01-15T10:02:51+08:00</updated>
    <id>https://jarryyen.github.io/15159817711460.html</id>
    <content type="html"><![CDATA[
<p>需要清单:<br/>
1. 外网 IP Server(建议独立)<br/>
2. Xen 虚拟化<br/>
3. </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[screen detached了怎么办]]></title>
    <link href="https://jarryyen.github.io/15151417121416.html"/>
    <updated>2018-01-05T16:41:52+08:00</updated>
    <id>https://jarryyen.github.io/15151417121416.html</id>
    <content type="html"><![CDATA[
<pre><code>screen -X -S [session # you want to kill] quit
</code></pre>

<p>例如:<br/>
```<br/>
[root@localhost ~]# screen -ls<br/>
There are screens on:<br/>
        9975.pts-0.localhost    (Detached)<br/>
        4588.pts-3.localhost    (Detached)<br/>
2 Sockets in /var/run/screen/S-root.</p>

<p>[root@localhost ~]# screen -X -S 4588 quit<br/>
[root@localhost ~]# screen -ls<br/>
There is a screen on:<br/>
        9975.pts-0.localhost    (Detached)<br/>
1 Socket in /var/run/screen/S-root.<br/>
```<br/>
可以看到，4588会话已经没有了。</p>

<p>参考资料：<br/>
（1）<a href="http://stackoverflow.com/questions/1509677/kill-detached-screen-session" title="Kill detached screen session">Kill detached screen session</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在MarkDown中添加潜入视频或音频]]></title>
    <link href="https://jarryyen.github.io/15150357946970.html"/>
    <updated>2018-01-04T11:16:34+08:00</updated>
    <id>https://jarryyen.github.io/15150357946970.html</id>
    <content type="html"><![CDATA[
<p>我们使用iframe来将资源进行潜入</p>

<p>下面是一段网易云音乐的音乐播放列表事例,直接在MarkDown中贴上HTML的iframe就可以实现资源的嵌入渲染了.</p>

<pre><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=450 src=&quot;http://music.163.com/outchain/player?type=1&amp;id=36037083&amp;auto=0&amp;height=430&quot;&gt;&lt;/iframe&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【纪录片】《蓝色星球2》单剧连载中]]></title>
    <link href="https://jarryyen.github.io/15111487950640.html"/>
    <updated>2017-11-20T11:33:15+08:00</updated>
    <id>https://jarryyen.github.io/15111487950640.html</id>
    <content type="html"><![CDATA[
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcly1floe9z336oj30dw0itq4h.jpg" alt=""/></p>

<p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1floe9sjrk2g30b4069twm.gif" alt=""/></p>

<p>英国著名生物学家、BBC主持人及制作人戴维·阿滕伯勒确定将为BBC七集自然类纪录片《蓝色星球》第二季担任旁白。2001年，阿滕伯勒便曾为《蓝色星球》第一季献声。今年91岁高龄的阿滕伯勒表示，再度加盟《蓝色星球》系列、开启全新的海洋之旅，让他激动不已。</p>

<p>迅雷:</p>

<p>第四集<br/>
thunder://QUFlZDJrOi8vfGZpbGV8Qmx1ZS5QbGFuZXQuSUkuUzAxRTA0LkJpZy5CbHVlLjEwODBwLkFNWk4uV0VCLURMLkREUDUuMS5ILjI2NC1OVGIubWt2fDQ3MDg0NTQwNDN8MTRDNjA1NDBCOUQxMTA0MDgxRjcyQzY5NENDNUNBNjJ8aD1XMkFJU09NVjRWQUtXSENNVlVYS1ZINkQ3Wk5CT01YRnwvWlo=</p>

<p>第三集<br/>
thunder://QUFlZDJrOi8vfGZpbGV8Qmx1ZS5QbGFuZXQuSUkuUzAxRTAzLkNvcmFsLlJlZWZzLjEwODBwLkFNWk4uV0VCLURMLkREUDUuMS5ILjI2NC1OVGIubWt2fDUyNzk1ODg4NDZ8QTQ2RTQxRDY0ODAzODc5QzY5Q0VCRUM1QTIxRDNDNDR8aD1BQTRMUzZKWTIzWk9STTRXS1JRQ0NIV0RTWkFXWUhXWHwvWlo=</p>

<p>第二集<br/>
thunder://QUFlZDJrOi8vfGZpbGV8Qmx1ZS5QbGFuZXQuSUkuUzAxRTAyLlRoZS5EZWVwLjEwODBwLkFNWk4uV0VCLURMLkREUDUuMS5ILjI2NC1OVGIubWt2fDM2MDQyODc2NjJ8NzVGM0U3NDgxNzc0NzA5NzNENDlEREZEODIyMEJDODB8aD1DRU01MkJZSFBXTklTUFJaVlE0NUhMQlBCQUZOWU1TUHwvWlo=</p>

<p>第一集<br/>
thunder://QUFlZDJrOi8vfGZpbGV8Qmx1ZS5QbGFuZXQuSUkuUzAxRTAxLk9uZS5PY2Vhbi4xMDgwcC5BTVpOLldFQi1ETC5ERFA1LjEuSC4yNjQtTlRiLm1rdnw1Mjc3MTYzMDE0fDgyN0QxQUQ0NTkxRDE1REVGNUFERTNCRTQ0MjNCMEFBfGg9TlNUSTZLNlo0NzNOT09RTVNJNEFTWE1TVk1USUJYT0x8L1pa</p>

<p>Ek2k:</p>

<p>第四集<br/>
ed2k://|file|Blue.Planet.II.S01E04.Big.Blue.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb.mkv|4708454043|14C60540B9D1104081F72C694CC5CA62|h=W2AISOMV4VAKWHCMVUXKVH6D7ZNBOMXF|/</p>

<p>第三集<br/>
ed2k://|file|Blue.Planet.II.S01E03.Coral.Reefs.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb.mkv|5279588846|A46E41D64803879C69CEBEC5A21D3C44|h=AA4LS6JY23ZORM4WKRQCCHWDSZAWYHWX|/</p>

<p>第二集<br/>
ed2k://|file|Blue.Planet.II.S01E02.The.Deep.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb.mkv|3604287662|75F3E748177470973D49DDFD8220BC80|h=CEM52BYHPWNISPRZVQ45HLBPBAFNYMSP|/</p>

<p>第一集<br/>
ed2k://|file|Blue.Planet.II.S01E01.One.Ocean.1080p.AMZN.WEB-DL.DDP5.1.H.264-NTb.mkv|5277163014|827D1AD4591D15DEF5ADE3BE4423B0AA|h=NSTI6K6Z473NOOQMSI4ASXMSVMTIBXOL|/</p>

<p>资源来自人人字幕组 zimuzu.tv 感谢你们做出的努力~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DxO OpticsPro 11]]></title>
    <link href="https://jarryyen.github.io/15083801639905.html"/>
    <updated>2017-10-19T10:29:23+08:00</updated>
    <id>https://jarryyen.github.io/15083801639905.html</id>
    <content type="html"><![CDATA[
<p>What&#39;s in DxO OpticsPro - Elite Edition:</p>

<ul>
<li>Remove atmospheric haze thanks to DxO ClearView</li>
<li>DxO PRIME 2016: even more powerful and up to 4x faster</li>
<li>Highly customizable interface</li>
<li>Advanced controls :

<ul>
<li>moiré removal,</li>
<li>ICC profile support,</li>
<li>multi-camera&#39;s color rendition</li>
</ul></li>
</ul>

<blockquote>
<p>DxO Optics Pro 11正式版是世界上最好的照片后期处理软件之一，目前该公司发布的DxO Optics Pro 10正式版将会延续这一经典RAW处理软件的辉煌。DxO Optics Pro 11会自动提高图像质量，并突破相机极限，纠正所有的镜头变形，和改进相机拍照时传感器带给照片的常见现象，包括智能化的照片降噪。DxO Optics Pro是一款屡获殊荣的RAW程序软件，其开发公司基于长期专一的相机和镜头属性研究获取到的研发知识为DxO Optics Pro提供了出色的图像质量输出，即使照片是拍摄在​​超高的ISO下的JPEG或RAW文件格式。</p>

<p>DXO OPTICS PRO11 破解版的独特之处在于它拥有最高质量的照片后期优化修正能力，无需人工干预。无论你是想简单一次性自动化获得一张你要的高质量效果照片，而不必仔细设置 滑块，或者您想手动设置自己的校正参数，DXO OPTICS PRO 11 都将满足您的需要。 DXO OPTICS PRO11是开发理想便是减轻你的工作量，最佳化纠正你宝贵的影像图片。设计是空素材站  国内首发，该软件个人感觉自动化处理的图像是同类软件中最好的。也是最贵的。</p>
</blockquote>

<p>下载地址：<br/>
Windows: <a href="https://downloads.sharewareonsale.com/files/hub/sharewareonsale.com/SharewareOnSale_Giveaway_DxO_OpticsPro_11_Essential_hub.exe">https://downloads.sharewareonsale.com/files/hub/sharewareonsale.com/SharewareOnSale_Giveaway_DxO_OpticsPro_11_Essential_hub.exe</a></p>

<p>Mac: <a href="https://downloads.sharewareonsale.com/files/mac/DxO_OpticsPro11.dmg">https://downloads.sharewareonsale.com/files/mac/DxO_OpticsPro11.dmg</a></p>

<p>Use the code : PRCTPH2017<br/>
This offer ends on : January, 1st 2018</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[# 来自深渊 （KINEMA CITRUS改编的电视动画）]]></title>
    <link href="https://jarryyen.github.io/15057082298289.html"/>
    <updated>2017-09-18T12:17:09+08:00</updated>
    <id>https://jarryyen.github.io/15057082298289.html</id>
    <content type="html"><![CDATA[
<p><img src="http://ofcfvx6lf.bkt.clouddn.com/visual02-02.jpg" alt="visual02-02"/></p>

<p>电视动画《来自深渊》改编自土笔章人原作的同名漫画，动画由KINEMA CITRUS负责制作。于2016年12月21日宣布动画化。</p>

<p>2017年7月7日起每周五20:30在AT-X首播。<br/>
中国大陆22:00由爱奇艺独家正版更新。</p>

<p>中文名 来自深渊 <br/>
原版名称 メイドインアビス <br/>
其他名称 Made in Abyss <br/>
动画制作KINEMA CITRUS<br/>
集    数 13 <br/>
类    型 奇幻 <br/>
地    区 日本 <br/>
原    作 土笔章人 <br/>
导    演小岛正幸 ，垪和等（副监督） <br/>
编    剧仓田英之<br/><br/>
剧    本 仓田英之、小柳啓伍 <br/>
角色设计 黄濑和哉<br/><br/>
音    乐 kevin penkin <br/>
主要配音 富田美忧，伊濑茉莉也 <br/>
首播电视台 AT-X <br/>
播放期间 2017年7月7日- <br/>
其他电视台 TOKYO,MX,BS11,KBS京都,佐贺电视台,爱知电视台,TVQ九州放送,SUN电视台</p>

<p>网络播放爱奇艺（中国大陆） <br/>
巴哈姆特动画疯（中国台湾） <br/>
出    品 来自深渊制作委员会 <br/>
发    行 MEDIA FACTORY<br/>
发行时间 2017年10月25日-12月22日（全2卷） <br/>
代理发行 杰外动漫（中国）</p>

<h2 id="toc_0">剧情简介编辑</h2>

<p>在每一个角落都被探索完毕的世界中，唯一残留的秘境——大洞穴“阿比斯”。不知道延续到何方，深不见底的巨大纵向洞穴，栖息着奇妙奇怪的生物们，沉眠着现在的人类无法制造的贵重遗物。“阿比斯”那充满了不可思议的姿态吸引了人们，并驱使人们展开冒险。如此，多次挑战大洞穴的冒险者们，陆续得到了“探窟家”的名号。<br/>
住在建造于深渊边缘的城镇“奥斯”的孤儿莉可，梦想着有朝一日成为母亲那样伟大的探窟家，并解开深渊的谜团。这样的某一天，莉可在探索深渊的途中，捡到了有着少年样貌的机器人…？</p>

<h2 id="toc_1">角色介绍</h2>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_001.jpg" alt="p_001"/></p>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_002.jpg" alt="p_002"/></p>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_003_02.jpg" alt="p_003_02"/></p>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_004.jpg" alt="p_004"/></p>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_005.jpg" alt="p_005"/></p>

<p><img src="http://ofcfvx6lf.bkt.clouddn.com/p_006.jpg" alt="p_006"/></p>

<h2 id="toc_2">剧情详解</h2>

<h4 id="toc_3">第1话 巨穴之镇</h4>

<p>　　住在建造于巨穴“阿比斯”边缘的城镇“奥斯”的少女见习探险家·莉可。一天，孤儿院的少年伙伴·那多在探窟中被巨大的蛇形生物“血口巨蛇”袭击时而遇难。莉可灵机一动吸引它注意，但这次轮到自己被血口巨蛇袭击了。在穷途末路的那一瞬间，突然周围被闪光和轰鸣所包围…。</p>

<h4 id="toc_4">第2话 复活祭</h4>

<p>　　夜晚，在莉可的房间聚集的孩子们，推测着雷格是否来自阿比斯之底。西吉整理的发掘的遗物图鉴“遗物录”中，哪都没有记载着像雷格那样的遗物。他或许是阿比斯史上最有价值的遗物之一“奈落的至宝”。如果雷格被大人们发现的话，“会被夺走并分解掉”担心的孩子们决定实行某个作战，但…。</p>

<h4 id="toc_5">第3话 出发</h4>

<p>　　莱莎在持有的信上写着“我在阿比斯之底等你”的信息。莉可确信这是莱莎寄给自己的信，于是向伙伴们坦白想要前往阿比斯之底。但是，却与忠告会变成再也回不来的旅程的那多吵起了架…。此时，雷格来孤儿院后第一次去探窟。重新潜入阿比斯的雷格会…。</p>

<h4 id="toc_6">第4话 阿比斯深渊</h4>

<p>　　莉可醒来时，眼前就出现了雷格的睡相和铺满绳索的手臂。从“奥斯”启程的两人到达深界一层“阿比斯深渊”，有常常警戒周围的必要。“照这个速度的话能前往奈落之底的！”眼睛放光的莉可，肚子饿了。于是吃起了特制的莉可汤，此时雷格突然想起了装进口袋里的信封。那里写着的文字是…。</p>

<h4 id="toc_7">第5话 火葬炮</h4>

<p>　　莉可和雷格到达深界二层“诱惑之森”。想起西吉的话，赤笛就这样下去的话就是自寻死路，并且进退两难。甩开追兵后安心的两人走在天雾树的叶子群生的森林时，听到远处传来的人声。慌忙地前往传来呼救声的地方后，发现那里有一只巨大的鸟类生物和倒在旁边的探窟家…。</p>

<h4 id="toc_8">第6话 监视基地</h4>

<p>　　来迎接好不容易来到“监视基地”的莉可和雷格的，是不动卿“不动如山的奥森”。从哈勃尔库的话中，她是现役的白笛，并曾经和莱莎一起把在阿比斯深层出生的莉可运往地上。莉可对救命恩人道谢，然而奥森却用令人害怕的表情开始笑…。然后，两人与奥森的首席弟子“马璐璐库”度过一晚上。莉可在深夜时醒来后…。</p>

<h4 id="toc_9">第7话 不动卿</h4>

<p>　　与莉可他们道别，回到了奥斯城镇的哈勃尔库，向那多和西吉说起有关在白笛之中拥有无双之怪力的“不动卿”奥森的话题。不过，哈勃尔库对奥森感到了某种不安…。另一方面，莉可他们在奥森的房间里与一个四方形的白箱对峙。对猜测着“这不就是传言自己被放进去的‘除咒之笼’？”的莉可，奥森说出了真相…。</p>

<h4 id="toc_10">第8话 生存训练</h4>

<p>　　被奥森布置新的启程训练“生存训练”。被告知要靠有限的装备在十天内活下去的莉可和雷格，首先为了确保饮用水而开始行动。马上发现了干净的水的莉可，一靠近水面突然摇动起来……。另一方面，奥森与“深渊盗贼”一同在远处观察其状况。看见莉可和雷格的样子，怀念起了…。</p>

<h4 id="toc_11">第9话 毒与诅咒</h4>

<p>　　莉可和雷格与奥森和马璐璐库他们道别后，费尽周折来到深界三层“大断层”。大断层正如其名有着巨大的垂直岩壁，据说其高度超过4000米。奥森教他们利用竖洞向下走，而在两人面前却出现了各种阿比斯的生物。就如往常那样依赖雷格的力量前进，然后突然听到了耳熟的某种声音…。</p>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="http://music.163.com/outchain/player?type=1&id=36037083&auto=0&height=430"></iframe>

<h2 id="toc_12">下载链接</h2>

<pre><code>https://pan.baidu.com/s/1dEFVgOT
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[敦刻尔克(1080P) Dunkirk 2017 NEW HD-TS x264-CPG]]></title>
    <link href="https://jarryyen.github.io/15046915958368.html"/>
    <updated>2017-09-06T17:53:15+08:00</updated>
    <id>https://jarryyen.github.io/15046915958368.html</id>
    <content type="html"><![CDATA[
<p>《敦刻尔克》是由辛克匹影业出品，美国华纳兄弟影业发行的战争悬疑片，由克里斯托弗·诺兰执导，汤姆·哈迪、肯尼思·布拉纳、马克·里朗斯、哈里·斯泰尔斯、希里安·墨菲、芬恩·怀特海德等领衔主演。<br/>
该片改编自二战历史事件《敦刻尔克大撤退》，当时40万英法联军被敌军包围在敦刻尔克的海滩上，面对敌军步步逼近的绝境，他们不得不为自己的命运背水一战[1]  。<br/>
该片于2017年7月21日在美国上映，9月1日在中国大陆上映[2]  。<br/>
中文名:敦刻尔克<br/>
外文名:Dunkirk<br/>
其它译名:敦刻尔克大行动（台湾）、邓寇克大行动（香港）<br/>
出品时间:2017年</p>

<p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fj9zyk34ocj30nm0xqdn4.jpg" alt=""/><br/>
<img src="https://ws1.sinaimg.cn/large/006tNc79ly1fj9zykdw2og30b504qtit.gif" alt=""/><br/>
<img src="https://ws2.sinaimg.cn/large/006tNc79ly1fj9zykrxv5g308w04s4qp.gif" alt=""/><br/>
<img src="https://ws1.sinaimg.cn/large/006tNc79ly1fj9zyll4i3g30b4061kjl.gif" alt=""/></p>

<pre><code>ed2k://|file|Dunkirk.2017.BD-1080p.1920X1080.mkv|4297243249|0EAEAFD6C865E3C96C28EDD268E3175D|h=CST5CXE2SWLGSZUJIOBAVF74AWOMFMOR|/
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[星际特工：千星之城(1080P & 4K)]]></title>
    <link href="https://jarryyen.github.io/15038828406046.html"/>
    <updated>2017-08-28T09:14:00+08:00</updated>
    <id>https://jarryyen.github.io/15038828406046.html</id>
    <content type="html"><![CDATA[
<p>人类和众多外星种族共同生活在一个名为千星之城阿尔法的繁华星际大都市，数百年来，千星之城阿尔法成为各族群和平共处的美妙天堂，它繁荣昌盛，它欣欣向上，然而，宇宙的神秘黑暗力量正试图摧毁这一切。韦勒瑞恩（戴恩·德哈恩饰）和洛瑞琳（卡拉·迪瓦伊饰）被选择成为阿尔法的守护者，他们俩是警卫部的执行人员，被任命去拦截一种稀有物品的交易。这种稀有物品与一个本该在数十年前就消失的稀有族群存在神秘的关联。然后他们来到了巨大的漂浮都市阿尔法城，这时他们的指挥官Arun Filitt（克里夫·欧文饰）在指挥中心遭到绑架，这对搭档开始意识到手中物品的不寻常价值。二人追寻凶手而来到位于阿尔法城心脏的死亡之境，发现自己身陷一场正在发酵的星际事件中——他们需要通过控制手中那个能够改变宇宙秩序的物品，在其他物种被卷进来之前救出Arun  。</p>

<p><img src="https://gss2.bdstatic.com/9fo3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike180%2C5%2C5%2C180%2C60/sign=5472f250a3773912d02b8d339970ed7d/8b13632762d0f70333fe213102fa513d2797c58b.jpg" alt=""/></p>

<pre><code>magnet:?xt=urn:btih:AN5SS67YIB56US7M6FU5GDDE4EPQQCFW
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天遇到了LaunchPad的问题]]></title>
    <link href="https://jarryyen.github.io/15017403101947.html"/>
    <updated>2017-08-03T14:05:10+08:00</updated>
    <id>https://jarryyen.github.io/15017403101947.html</id>
    <content type="html"><![CDATA[
<p>今天遇到了一个Mac OS的LaunchPad的问题，使用手势打开LaunchPad后输入关键字无法进行搜索。</p>

<p>处理这个问题我的办法是，重置Dock。<br/>
LaunchPad是属于Dock的.</p>

<p>Mac OS 10.10系统或更新</p>

<blockquote>
<p>defaults write com.apple.dock ResetLaunchPad -bool true; killall Dock</p>
</blockquote>

<p>Mac OS 10.9系统</p>

<blockquote>
<p>rm ~/Library/Application\ Support/Dock/*.db ; killall Dock</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
